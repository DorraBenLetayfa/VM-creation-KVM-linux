---
# tasks file for vmcreation
- name: Check if VM already exists
  community.libvirt.virt:
    name: "{{ vm_name }}"
    command: status
  register: vm_info
  become: true
  changed_when: false
  failed_when: false

- name: Debug VM info
  debug:
    var: vm_info
  when: vm_info.status is defined

- name: Stop if VM already exists
  fail:
    msg: "VM {{ vm_name }} already exists! Stopping playbook."
  when: vm_info.status is defined

- name: Create disk image if it doesn't exist
  community.libvirt.virt_volume:
    name: "{{ vm_name }}.qcow2"
    pool: "{{ pool }}"
    state: present
    xml: |
      <volume>
        <name>{{ vm_name }}.qcow2</name>
        <capacity unit="G">{{ vm_disk_size }}</capacity>
        <target>
          <format type="{{ vm_disk_format }}"/>
        </target>
      </volume>
  when: vm_info.status is not defined

- name: Generate libvirt XML configuration
  ansible.builtin.template:
    src: vm_template.xml.j2
    dest: "/tmp/{{ vm_name }}.xml"
  when: vm_info.status is not defined

- name: Prepare cloud-init ISO
  import_tasks: cloud_init.yml

- name: Define VM
  ansible.builtin.command: virsh -c qemu:///system define /tmp/{{ vm_name }}.xml
  become: true

- name: Start VM
  ansible.builtin.command: virsh -c qemu:///system  start {{ vm_name }}
  become: true

- name: Get VM info
  community.libvirt.virt:
    name: "{{ vm_name }}"
    command: status
  register: vm_info

- name: Start existing VM if it's not running
  community.libvirt.virt:
    name: "{{ vm_name }}"
    state: running
  when: vm_info.status is not defined and vm_result is defined

- name: Clean up temporary XML file
  ansible.builtin.file:
    path: "/tmp/{{ vm_name }}.xml"
    state: absent
  ignore_errors: true

- name: Show VM status
  ansible.builtin.debug:
    msg: "VM '{{ vm_name }}' is {{ vm_info.status }}"
